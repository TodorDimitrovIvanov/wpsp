import getopt
import sys
import subprocess
import re
import datetime
from subprocess import PIPE
from urllib import URLopener
from operator import itemgetter

class WP_Profiler:

    #wp_cli_profiler_results = []

    def __init__(self):
        self.wp_cli_download()
        self.wp_cli_profiler_download()

    def wp_cli_download(self):
        # Here we download a local copy of WP Cli
        print("\n\033[1;31;49m---- Downloading WP Cli ----\033[1;37;49m")
        url = 'https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar'
        temp = URLopener()
        temp.retrieve(url, './wp-cli.phar')
        print "\nSuccess: Downloaded"

    def wp_cli_profiler_download(self):
        # Here we download the WP Profile module for WP Cli
        print("\n\033[1;31;49m---- Downloading WP Cli Profiler ----\033[1;37;49m\n")
        process = subprocess.Popen('/usr/local/php56/bin/php-cli wp-cli.phar package install wp-cli/profile-command', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
        output, error = process.communicate()
        result = process.returncode
        temp_list = []
        lines = re.split('\t|\n', output)
        for item in lines:
            temp_list.append(item)
        print temp_list [-2]

    # Comment needed
    def wp_cli_plugin_list_get(self):
        # With this method we get a list of the website's active plugins
        website_plugins_get_process = subprocess.Popen(
            'wp plugin list --status=active --fields=name --skip-plugins --skip-themes', stderr=PIPE, stdin=PIPE,
            stdout=PIPE, shell=True)
        website_plugins_get_process_result, website_plugins_get_process_error_message = website_plugins_get_process.communicate()
        website_plugins_get_process_code = website_plugins_get_process.returncode

        # Here we split the 'plugins' string into a list
        temp_list = []
        words = re.split('\t|\n', website_plugins_get_process_result)
        for item in words:
            temp_list.append(item)
        # Removing the first element from the plugin list as it is 'name'
        if len(temp_list) is 0:
            print "There are no active plugins on the website."
            print "\n\033[1;31;49m---- Exiting ----\033[1;37;49m\n"
            sys.exit()
        # Removing the first element from the plugin list as it is the headers of the table generated by WP CLI
        temp_list.pop(0)
        # Removing the last element from the plugin list as it is whitespace
        del temp_list[-1]
        # Lastly, we return the list of active plugins on the website
        return temp_list

    # Function seems to be deprecated
    # The self.wp_cli_profiler_results variable is not used
    def profiler_results_get(self):
        temp_list = []
        for index, item in enumerate(self.wp_cli_profiler_results):
            if index < len(self.wp_cli_profiler_results):
                if index is 0:
                    continue
                if index is len(self.wp_cli_profiler_results)-1:
                    break
                if index is len(self.wp_cli_profiler_results)-2:
                    break
                else:
                    item[1] = re.sub(r'\"|[\ s]', '', item[1])
                    temp_list.append(item)
        return temp_list

    def profiler_result_print_multiple(self, result_list, **kwargs):
        # Comment needed
        result_count = 10

        for key, value in kwargs.items():
            if key is "result_count":
                result_count = value

        for index, dict in enumerate(result_list):
            name = dict.get('name')
            value = dict.get('value')
            extra = dict.get('extra')
            if index <= result_count:
                print("    |{:<8}|{:<25}| {}".format(value, name, extra))

    def profiler_result_print_single(self, result_list, target, **kwargs):
        # Comment needed
        result_count = 10

        for key, value in kwargs.items():
            if key is "result_count":
                result_count = value

        for index, item in enumerate(result_list):
            if index <= result_count:
                if item['name'] is target:
                    name = item.get('name')
                    value = item.get('value')
                    extra = item.get('extra')
                    print("%s10|{:<8} |{:<25}| {}".format(value, name, extra))

    def profiler_result_print_by_parent(self, result_list, parent, **kwargs):
        # Comment needed
        result_count = 10

        for key, value in kwargs.items():
            if key is "result_count":
                result_count = value

        for index, item in enumerate(result_list):
            if item['parent'] is parent:
                if index <= result_count:
                    name = item.get('name')
                    value = item.get('value')
                    extra = item.get('extra')
                    print("    |{:<8}|{:<25}| {}".format(value, name, extra))

    def analytics_generate_loading_bar(self, count, total, status=''):
        # Code taken from here: https://gist.github.com/vladignatyev/06860ec2040cb497f0f3
        bar_len = 50
        bar_filled_len = int(round(bar_len * count / total))
        percents = round(100 * count / total, 1)
        bar = '=' * bar_filled_len + '-' * (bar_len - bar_filled_len)
        # Printing the line below clears the screen from the previous output
        # This is necessary as otherwise bits of string are left from the previous output
        sys.stdout.write("\033[K")
        sys.stdout.write('[%s] %s%s - %s\r' % (bar, percents, '%', status))
        sys.stdout.flush()

    def profiler_run(self, type, request):
        # The idea behind this function is to install the WP Profiler module for WP Cli and run an automated test with it
        # Since the WP Profile module for WP Cli does not work properly with PHP 7+ I'll instead we use it with PHP Cli 5.6
        # Not sure what implications this may have but from what I can see it completes the test properly

        if type is "stage":
            # If there is a request then we list only the specified stage
            if request != "" in request:
                command = "/usr/local/php56/bin/php-cli wp-cli.phar profile stage " + request + " --spotlight --order=DESC --orderby=time --fields=hook,time,cache_ratio --skip-plugins=sg-cachepress"
            # If there is no request then we set all stages to be listed
            if request is "":
                command = "/usr/local/php56/bin/php-cli wp-cli.phar profile stage  --spotlight --order=DESC --orderby=time --fields=stage,time,cache_ratio  --skip-plugins=sg-cachepress"
            if "--skip-plugins" in request:
                command = "/usr/local/php56/bin/php-cli wp-cli.phar profile stage  --spotlight --order=DESC --orderby=time --fields=stage,time,cache_ratio " + request + ",sg-cachepress"
        if type is "hook":
            if request != "":
                command = "/usr/local/php56/bin/php-cli wp-cli.phar profile hook " + request + " --all --spotlight --order=DESC --orderby=time --fields=callback,time,location  --skip-plugins=sg-cachepress"
            if request is "":
                command = "/usr/local/php56/bin/php-cli wp-cli.phar profile hook --all --spotlight --order=DESC --orderby=time --fields=callback,time,location  --skip-plugins=sg-cachepress"

        process = subprocess.Popen(command, stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
        # The 'output' variable is what we receive as results from the command above and it is returned as a string
        # Analogically the 'error' variable returns an error message, provided there is such by running the command
        output, error = process.communicate()
        result = process.returncode

        # Here we split the 'output' variable into a list by using '\n' and '\t' as delimiters
        temp_list = []
        words = re.split('\t|\n', output)
        for item in words:
            temp_list.append(item)

        results_dict = []

        # Preparing a dict object which we return with the results from Profiler test
        for i in range(0, len(temp_list)-3, 3):
            if i >= 3 < len(temp_list) - 3:
                timing = re.sub('s', '', temp_list[i+1])
                temp = {
                    'parent': '',
                    'name': temp_list[i],
                    'value': float(timing),
                    'extra': temp_list[i+2]
                }
                results_dict.append(temp)
            else:
                temp = {
                    'parent': '',
                    'name': temp_list[i],
                    'value': temp_list[i + 1],
                    'extra': temp_list[i + 2]
                }
                results_dict.append(temp)

        # Finally we return the result list
        return results_dict

    def analytics_general(self, cli_args):
        # Self note: Pass the cli arugments with the "sys.argv[1:]" method

        seconds = 0.5
        count = 10

        # Handling cli arguments
        # The 's' character stands for seconds and 'c' for count
        # The former sets the value above which we show results
        # While the latter sets the total number of results we show
        try:
            opts, args = getopt.getopt(cli_args, "hs:c:", ["seconds=", "count="])
        except getopt.GetoptError:
            print 'Usage: wpsp.py -s <float> -c <integer>'
            sys.exit(2)
        for opt, arg in opts:
            if opt == '-h':
                print 'Usage: wpsp.py -s <float> -c <integer>'
                print '-s | --seconds \tTells the script to search for results above N seconds. Default: 0.5'
                print '-c | --count \tTells the script to print only N number of results. Default: 10'
                sys.exit()
            elif opt in ("-s", "--seconds"):
                seconds = float(arg)
            elif opt in ("-c", "--count"):
                if int(arg) < 5:
                    count = 5
                else:
                    count = int(arg)

        profiler_stage_all = self.profiler_run("stage", "")
        results_stages_all = []

        # Here we start a test on all stages of the website
        # If there any results that take longer than N seconds to load we save them in the 'results_stages_all' list
        for index, dict in enumerate(profiler_stage_all):
            if dict['value'] >= seconds:
                results_stages_all.append(dict)
            else:
                pass

        results_hooks_N = []
        results_callbacks_N = []

        # If the initial results have entries that take more than N seconds to load
        if len(results_stages_all) > 0:

            # Here we iterate over the results from the 'results_stages_all' list.
            # This means that we run the profiler for all of the stages and save the results that took more than N seconds to load.
            # Lastly, we store the results along with the stage name within the 'results_hooks_N' list
            for stage in results_stages_all:
                # Ensuring  that the resulting table's header is not included
                if "stage" not in stage['name']:
                    # Here we start another profiler test with the stage that we want to test
                    profiler_stage = self.profiler_run("stage", stage['name'])
                    for index, dict in enumerate(profiler_stage):
                        if len(dict) > 0:
                            if dict['value'] >= seconds:
                                # Here we save the name of the stage we tested within the hook results dictionary
                                dict['parent'] = stage['name']
                                results_hooks_N.append(dict)

            # Here we iterate over the results from the 'results_hooks_N' list.
            # This means that we run the profiler on all of the hooks that take more than N seconds to load.
            # Lastly we store the results along with the name of the hook within the 'results_callbacks_N' list.
            # The 'results_hooks_N' list now consists of list like this [ stage_name, result_hook_dict ]
            for hook in results_hooks_N:
                # Ensuring that the resulting table's header is not included
                if "hook" not in hook['name']:
                    # Here we start another profiler test with the hook that we want to test
                    profiler_hook = self.profiler_run("hook", hook['name'])
                    for dict in profiler_hook:
                        if dict['value'] >= seconds:
                            # Here we save the name of the hook we tested within the callback results dictionary
                            dict['parent'] = hook['name']
                            results_callbacks_N.append(dict)

            # Here we check if the operator has selected the option to save the results
            # If yes then we generate a wp-cli-profiler-results-DATE.json file
            # Otherwise we skip this part over
            # CODE NEEDED BELLOW!!!!!!!!!!!!!

            print("\n\033[1;33;49m---- WP Cli-Profiler stage by stage test ----\033[1;37;49m\n")
            date = datetime.date.today()
            time = datetime.datetime.now()
            print "Test Starting Time: ", date.strftime("%b %d %Y"), time.strftime("%H:%M:%S")
            # Here we print the results from the tests that we run above
            print "Legend:"
            print "> [ \033[1;31;49mstage\033[1;37;49m ] - a part of the the website's loading process"
            print "    bootstrap  - loads the initial instructions and settings of the website"
            print "    template   - loads the layout of the website from the active theme on the website"
            print "    main_query - prepares the data for the requested page"
            print "> [ \033[1;32;49mhook\033[1;37;49m ] - a function used by WP the core, a plugin or the theme of the website"
            print "-" * 50

            # First we print the stages that took longer than N seconds to load
            print"\n> Stages that take longer than [", seconds, "] seconds to load:"
            self.profiler_result_print_multiple(results_stages_all, result_count=count)
            print "-" * 50
            # Then we print the hooks that took longer than N seconds to load

            for stage in results_stages_all:
                if "total" not in stage['name']:
                    if "stage" not in stage['name']:
                        # Comment needed
                        print"> [\033[1;33;49m WP Core\033[1;37;49m ][\033[1;31;49m", stage['name'], "\033[1;37;49m] hooks that take longer than [", seconds, "] seconds to load:"
                        self.profiler_result_print_by_parent(results_hooks_N, stage['name'], result_count=count)

                        for hook in results_hooks_N:
                            if "total" not in hook['name']:
                                if hook['parent'] is stage['name'] and "hook" not in hook['name']:
                                    # Comment needed
                                    print "> [\033[1;33;49m WP Core\033[1;37;49m ][\033[1;31;49m", stage['name'], "\033[1;37;49m][\033[1;32;49m", hook['name'], "\033[1;37;49m] callbacks that take longer than [", seconds, "] seconds to load:"
                                    self.profiler_result_print_by_parent(results_callbacks_N, hook['name'], result_count=count)
                                    print "-" * 100
        else:
            # If there are no stages that took longer than N seconds to load
            # Then there's no point in running the other tests
            print "\n\t", "#" * 30 , "\n\tThe WP Cli Profiler results returned no entries above [" , seconds , "]", "\n\tor one of the website's plugins cause the Profiler to malfunction", "\n\t" + "#" * 30
            print "\n\tThe raw results from the test are:\n"
            command = "/usr/local/php56/bin/php-cli wp-cli.phar profile stage --spotlight --order=DESC --orderby=time --fields=hook,time,cache_ratio --skip-plugins=sg-cachepress"
            process = subprocess.Popen(command, stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
            output, error = process.communicate()
            result = process.returncode
            print output
            sys.exit()

    def analytics_by_plugin(self, cli_args):
        # Self note: Pass the cli arugments with the "sys.argv[1:]" method

        seconds = 0.5
        count = 10
        # The 'active_plugins_list' list consists of the active plugins on the website
        active_plugins_list = []
        # The 'profiler_plugins_baseline_results' list consists of result dictionaries from running the Profiler
        # Without skipping any plugins
        profiler_plugins_baseline_results = []
        # The 'profiler_plugins_test_results' list consists of result dictionaries from running the Profiler
        # By skipping a plugin on each third iteration
        profiler_plugins_test_results = []

        # Handling cli arguments
        # The 's' character stands for seconds and 'c' for count
        # The former sets the value above which we show results
        # While the latter sets the total number of results we show
        try:
            opts, args = getopt.getopt(cli_args, "hs:c:", ["seconds=", "count="])
        except getopt.GetoptError:
            print 'Usage: wpsp.py -s <float> -c <integer>'
            sys.exit(2)
        for opt, arg in opts:
            if opt == '-h':
                print 'Usage: wpsp.py -s <float> -c <integer>'
                print '-s | --seconds \tTells the script to search for results above N seconds. Default: 0.5'
                print '-c | --count \tTells the script to print only N number of results. Default: 10'
                sys.exit()
            elif opt in ("-s", "--seconds"):
                seconds = float(arg)
            elif opt in ("-c", "--count"):
                if int(arg) < 5:
                    count = 5
                else:
                    count = int(arg)

        # Here we populate the list of active plugins on the website.
        active_plugins_list = self.wp_cli_plugin_list_get()

        print("\n\033[1;33;49m---- WP CLI-Profiler plugin by plugin test ----\033[1;37;49m\n")

        # Here we run a test three times for each skipped plugin
        # This way we can later use the averages of these tests to make recommendations
        for index, plugin in enumerate(active_plugins_list):

            # Here we generate the loading bar
            message = "Testing [\033[1;31;49m" + plugin + "\033[1;37;49m] plugin."
            self.analytics_generate_loading_bar(index, len(active_plugins_list), message)


            # Here we prepare the command request that is passed to the Profiler
            profiler_plugin_result_list = []
            for i in range(3):
                request = "--skip-plugins=" + plugin
                i = self.profiler_run("stage", request)
                for element in i:
                    if "total" in element['name']:
                        profiler_plugin_result_list.append(element)

            # Here we run a baseline test three times so we can later on use the average
            # This is because the Profiler results are inconsistent due to something
            # Could be server's CPU load, not sure
            for i in range(3):
                i = self.profiler_run("stage", "")
                for element in i:
                    if "total" in element['name']:
                        element['parent'] = plugin
                        profiler_plugins_baseline_results.append(element)

            # Then we loop through the resulting list and _______
            # The 'temp_list' is a list of dictionaries returned from the 'profiler_run' method
            # Each dictionary within the list contains the name, value, extra and parent keys and values
            for element in profiler_plugin_result_list:
                # For each dict in the 'temp_list' list
                if type(element['value']) is float and element['value'] >= seconds and "total" in element['name']:
                    # Here we assign a parent to each dict so we can track the test results
                    # The 'parent' value of the dict is the name of the plugin from the
                    element['parent'] = plugin
                    profiler_plugins_test_results.append(element)
        self.analytics_generate_loading_bar(1, 1, "Done")

        # Here we process the results from the baseline tests
        # This means that we combine the results from the three initial tests and divide it by three
        baseline_test_result = []
        for plugin in active_plugins_list:
            baseline_test_average = 0
            for base_dict in profiler_plugins_baseline_results:
                if "total" in base_dict['name'] and plugin is base_dict['parent'] and type(base_dict['value']) is float:
                    baseline_test_average += base_dict['value']
            # Generating a dict that stores the processed results
            temp_dict = {
                'plugin': plugin,
                'result': baseline_test_average/3
            }
            # Saving the processed results
            baseline_test_result.append(temp_dict)

        # Here we process the results from the plugin tests
        # This means that we combine the results from the three plugin tests and divide it by three
        plugins_test_result = []
        for plugin in active_plugins_list:
            plugins_test_average = 0
            for plug_dict in profiler_plugins_test_results:
                if plug_dict['parent'] is plugin and type(plug_dict['value']) is float:
                    plugins_test_average += plug_dict['value']
            # Generating a dict that stores the processed results
            temp_dict = {
                'plugin': plugin,
                'result': plugins_test_average/3
            }
            # Saving the processed results
            plugins_test_result.append(temp_dict)

        # Here we sort the plugins_test_result list by the 'result' key
        plugins_test_result_sorted = sorted(plugins_test_result, key=itemgetter('result'), reverse=False)

        # Here we print the generated table of results
        print("\n|{:<12}|{:<15}|{:<12}|{}".format('With Plugin', 'Without Plugin', 'Difference', 'Plugin Name'))

        for plugin_result in plugins_test_result_sorted:
            for base_result in baseline_test_result:
                if plugin_result['plugin'] is base_result['plugin']:
                    base = base_result['result']
                    plugin = plugin_result['result']
                    difference = base_result['result'] - plugin_result['result']
                    name = plugin_result['plugin']
                    print("|{:.2f}s       |{:<.2f}s          |{:<.2f}s       |{}".format(base, plugin, difference, name))


if __name__ == '__main__':

    profiler_instance = WP_Profiler()
    print("\n\033[1;31;49m---- Running WP Cli Profiler ----\033[1;37;49m")
    try:
        profiler_instance.analytics_general(sys.argv[1:])
        profiler_instance.analytics_by_plugin(sys.argv[1:])
        # We remove the script itself along with the wp-cli.phar file that was downloaded
        process = subprocess.Popen('rm -rf ./wpsp.py', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
        process = subprocess.Popen('rm -rf ./wp-cli.phar', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
    except KeyboardInterrupt:
        print "\n\033[1;31;49m---- Exiting ----\033[1;37;49m\n"
        print "\n\033[1;31;49m---- Removing script files ----\033[1;37;49m\n"
        # We remove the script itself along with the wp-cli.phar file that was downloaded
        process = subprocess.Popen('rm -rf ./wpsp.py', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
        process = subprocess.Popen('rm -rf ./wp-cli.phar', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
    except Exception as err:
        print "\n\033[1;31;49m---- Script crashed ----\033[1;37;49m\n"
        print "\n\033[1;31;49m---- Removing script files ----\033[1;37;49m\n"
        # We remove the script itself along with the wp-cli.phar file that was downloaded
        process = subprocess.Popen('rm -rf ./wpsp.py', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
        process = subprocess.Popen('rm -rf ./wp-cli.phar', stderr=PIPE, stdin=PIPE, stdout=PIPE, shell=True)
        print "Error message: \n", sys.exc_info()[0], err

    # Here we handle exceptions


    # Here we remove the downloaded wp-cli.phar file
    # And the wpsp.py script file
